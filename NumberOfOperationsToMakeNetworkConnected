class Solution {
public:
void dfs(vector<int> adj[], vector<bool> &visited, int src){
    visited[src]=true;
    for(auto it:adj[src]){
        if(!visited[it]){
            dfs(adj,visited,it);
        }
    }

}
    int makeConnected(int n, vector<vector<int>>& connections) {
        int len = connections.size();
        if(len<n-1) return -1;
        vector<int> adj[n];
        for(auto it:connections){
              adj[it[0]].push_back(it[1]);
              adj[it[1]].push_back(it[0]);
        }
        vector<bool> visited(n,false);
        int ans =0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(adj,visited,i);
                ans++;
            }
            
        }
         return ans-1;
    }
};

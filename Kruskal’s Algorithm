class Disjointset{
	
	vector<int> rank,parent;
	public:
	Disjointset(int n){
		rank.resize(n+1,0);
		parent.resize(n+1);
                for (int i = 0; i <= n; i++) {
                  parent[i] = i;
                }
        }
		int findUParent(int node){
			if(node==parent[node]){
				return node;
			}
			return parent[node]=findUParent(parent[node]);
		}
		void unionByRank(int u,int v){
			int ulp_u = findUParent(u);
			int ulp_v = findUParent(v);
			if(ulp_u==ulp_v) return;
			if(rank[ulp_u]<rank[ulp_v]){
				parent[ulp_u]=ulp_v;
			}
			else if(rank[ulp_v]<rank[ulp_u]){
				parent[ulp_v]=ulp_u;
			}
			else{
				parent[ulp_v]=ulp_u;
				rank[ulp_u]++;
			}
		}
};
int kruskalMST(int n, vector<vector<int>> &edges)
{
vector<pair<int,pair<int,int>>> edge;

 

           for(auto it : edges){

            int node = it[0];

            int adjnode = it[1];

            int wt = it[2];

            edge.push_back({wt,{node,adjnode}});

            }

 

            Disjointset ds(n);

            sort(edge.begin(),edge.end());

            int mstwt=0;

            

         for(auto it: edge){

             int wt = it.first;

             int u = it.second.first;

             int v =it.second.second;

             if(ds.findUParent(u) != ds.findUParent(v)){

                 mstwt += wt;

                 ds.unionByRank(u,v);

             }

         }   

    

        return mstwt;
}
